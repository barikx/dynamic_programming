#include <bits/stdc++.h>
using namespace std;

int dp[1005][1005];

// Returns the count of ways we can
// sum coins[0...n-1] coins to get sum "sum"
int count(int coins[], int n, int sum){

	// If sum is 0 then there is 1 solution
	// (do not include any coin)
	if (sum == 0)
		return 1;

	// If sum is less than 0 then no
	// solution exists
	if (sum < 0)
		return 0;

	// If there are no coins and sum
	// is greater than 0, then no
	// solution exist
	if (n <= 0)
		return 0;
		
	// If the subproblem is previously calculated then
    // simply return the result
    if (dp[n][sum] != -1)
        return dp[n][sum];

	// count is sum of solutions (i)
	// including coins[n-1] (ii) excluding coins[n-1]
	return dp[n][sum] = count(coins, n, sum - coins[n - 1]) + count(coins, n - 1, sum);
}

// Driver code
int main(){
	int i, j;
	int coins[] = { 2, 5, 3, 6 };
	int n = sizeof(coins) / sizeof(coins[0]);
	int sum = 10;
	memset(dp, -1, sizeof dp);

	cout << " " << count(coins, n, sum);

	return 0;
}
